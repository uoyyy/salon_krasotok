import telebot
from telebot import types
from database_root import *
from settings import START_TEXT, MAIN_MENU_BUTTON_TEXT, MAIN_MENU_SECTION_TEXT

try:
    from config import API_KEY
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.py: {}".format(e))
    exit()

bot = telebot.TeleBot(API_KEY)


def get_place_id_from_url(message):
    message = message.text.split()
    if len(message) > 1:
        return message[1]
    return None


def get_preuser(message):
    return User.get_preuser(message.chat.id)


def get_user(message):
    return User.get_user(message.chat.id)


def check_user(message):
    return User.check_user(message.chat.id)


def check_preuser(message):
    return User.check_preuser(message.chat.id)


def check_prepreuser(message):
    return User.check_prepreuser(message.chat.id)


def check_preuser_name(message):
    return User.get_preuser_name(message.chat.id)


def edit_user(message, name=None, number=None):
    if number is None:
        if name is None:
            User.create_prepreuser(message.chat.id)
        else:
            User.create_preuser(message.chat.id, name=name)
    else:
        User.create_user(message.chat.id, number=number)


@bot.message_handler(commands=['start'])
def start(message):
    if check_user(message):
        if get_place_id_from_url(message) is None:
            main_menu(message)
        else:
            place_id = int(get_place_id_from_url(message))
            start_record(message, place_id)
    elif check_preuser(message):
        handle_message(message)
    else:
        edit_user(message)
        bot.send_message(message.chat.id, f"{START_TEXT} –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if check_preuser(message):
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à –Ω–æ–º–µ—Ä', reply_markup=keyboard)
    elif check_prepreuser(message):
        edit_user(message, name=message.text)
        message.text = ""
        handle_message(message)
    else:
        bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        if check_user(message):
            bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, {get_user(message).name}. ")
        elif check_preuser(message):
            edit_user(message, number=message.contact.phone_number)
            bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                             reply_markup=types.ReplyKeyboardRemove())
            choose_city(message)
            return
        else:
            bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")
        main_menu(message)


def generate_markup(items):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for (name, callback_data) in items:
        markup.add(types.InlineKeyboardButton(name, callback_data=callback_data))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data:
        section, *args = call.data.split(".")
        if section == "main_menu":
            main_menu(call.message)
        elif section == "start_record_by_type":
            start_record_by_type(call.message)
        elif section == "start_record_by_type_of_service":
            start_record_by_type_of_service(call.message, args[0])
        elif section == "start_record_by_service":
            start_record_by_service(call.message, args[0])
        elif section == "start_record_by_center":
            start_record_by_center(call.message, args[0])
        elif section == "start_record_by_place":
            start_record_by_place(call.message, args[0])
        elif section == "start_record":
            start_record(call.message, args[0])
        elif section == "start_record_by_date":
            start_record_by_date(call.message, args[0])
        elif section == "show_records":
            show_records(call.message)
        elif section == "choose_city":
            if len(args) == 0:
                choose_city(call.message)
            else:
                set_new_city_from_choose_city(call.message, args[0])
        else:
            print(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è '{section}' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {str(args)}")
            i_dont_know_that_command(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)


def main_menu(message):
    markup = generate_markup([(f"üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", f"start_record_by_type"),
                              (f"üìî –ú–æ–∏ –∑–∞–ø–∏—Å–∏", f"show_records"),
                              (f"üèôÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", f"choose_city")])

    bot.send_message(message.chat.id, f"{MAIN_MENU_SECTION_TEXT()}\n\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å, {get_user(message).name}?",
                     reply_markup=markup)


def start_record_by_type(message):
    cur_types = list()
    for cur_type in GET_TYPES():
        cur_types.append((cur_type.name, f"start_record_by_type_of_service.{cur_type.id}"))
    cur_types.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_types)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —É—Å–ª—É–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_by_type_of_service(message, type_id):
    markup = generate_markup([(f"üé´ –ó–∞–ø–∏—Å—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ", f"start_record_by_service.{type_id}"),
                              (f"üè¢ –ó–∞–ø–∏—Å—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–ª–æ–Ω", f"start_record_by_center.{type_id}"),
                              (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —É—Å–ª—É–≥–∏", f"start_record_by_type"),
                              (MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                     reply_markup=markup)


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î —É—Å–ª—É–≥–∏, –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏—Ö –∞–π–¥–∏ –∫ place (—Å–∞–ª–æ–Ω—ã) –∏ records (–∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω—ã) TODO: –¥–æ–±–∞–≤–∏—Ç—å
# TODO: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É—Å–ª—É–≥: –≤—ã–±–æ—Ä —É—Å–ª—É–≥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ, –¥–∞–ª–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ç–µ–π —Å–∞–ª–æ–Ω–æ–≤, –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É
#  –∏ —ç—Ç–∏–º —É—Å–ª—É–≥–∞–º, –¥–∞–ª–µ–µ —Å–∞–ª–æ–Ω—ã (—Ç–æ–∂–µ —Å —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —ç—Ç–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏), –∞ –¥–∞–ª–µ–µ start_record —Å id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞
def start_record_by_service(message, type_id):
    i_dont_know_that_command(message)


# TODO: –≤—ã–¥–∞—á–∞ —Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def start_record_by_center(message, type_id):
    cur_centers = list()
    for cur_center in GET_CENTERS_BY_TYPE(type_id):
        cur_centers.append((cur_center.name, f"start_record_by_place.{cur_center.id}"))
    cur_centers.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_centers)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å —Å–∞–ª–æ–Ω–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


# TODO: –≤—ã–¥–∞—á–∞ —Å–∞–ª–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def start_record_by_place(message, center_id):
    cur_places = list()
    for cur_place in GET_PLACES_BY_CENTER(center_id):
        cur_places.append((cur_place.address, f"start_record.{cur_place.id}"))
    cur_places.append((f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤", f"start_record_by_center.{GET_CENTER(center_id).type_id}"))
    cur_places.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_places)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω —Å–µ—Ç–∏ {GET_CENTER(center_id).name}, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record(message, place_id):
    place = GET_PLACE(place_id)
    markup = generate_markup([(f"üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏", f"start_record_by_date.{place_id}"),
                              (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–∞–ª–æ–Ω–æ–≤ {place.center.name}", f"start_record_by_place.{place.center.type_id}"),
                              (MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–∏—Å—å –≤ '{place.center.name}' –ø–æ –∞–¥—Ä–µ—Å—É: {place.address}",
                     reply_markup=markup)


# TODO: –¥–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ datetime, –∑–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç—Å—ã–ª–∫—É —Å–∞–ª–æ–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
def start_record_by_date(message, place_id):
    i_dont_know_that_command(message)


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å—Ç–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ
#  –∫ —Å–∞–º–æ–º—É –ø–æ–∑–¥–Ω–µ–º—É, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å—å
def show_records(message):
    i_dont_know_that_command(message)


def choose_city(message):
    cities = list()
    for city in GET_CITIES():
        cities.append((city.name, f"choose_city.{city.id}"))
    markup = generate_markup(cities)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def set_new_city_from_choose_city(message, city_id):
    if GET_USER(message.chat.id).city:
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {GET_CITY_OBJECT(city_id).name}")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, {GET_USER(message.chat.id).name}! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {GET_CITY_OBJECT(city_id).name}")
    SET_USER_CITY(message.chat.id, city_id)
    main_menu(message)


def i_dont_know_that_command(message):
    markup = generate_markup([(MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–ü–æ–∫–∞ —á—Ç–æ —è —Ç–∞–∫–æ–≥–æ –Ω–µ —É–º–µ—é. –ü—Ä–æ—Å—Ç–∏, {get_user(message).name}, —è –≥–ª—É–ø—ã–π üòû",
                     reply_markup=markup)


# –æ—Å—Ç–∞–ª—å–Ω–æ–µ


# masters = ["–ê–Ω—Ç–æ–Ω()", "–í–∞–ª–µ—Ä–∏–π()", "–í–∞—Å—è()"]
# services = ["—Å—Ç—Ä–∏–∂–∫–∞", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã –∏ –º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "", "()"]
# dates = ["01.01.2024", "02.01.2024", "03.01.2024"]
# times = ["09:00", "11:00", "13:00", "15:00", "17:00",
#          "10:00", "12:00", "14:00", "16:00", "18:00"]
# chosen_master = None
# chosen_service = None
# chosen_date = None
# chosen_time = None
#
#
# def process_master_choice(message):
#     global chosen_master
#     chosen_master = message.text
#     msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=generate_markup(services))
#     bot.register_next_step_handler(msg, process_service_choice)
#
#
# def process_service_choice(message):
#     global chosen_service
#     chosen_service = message.text
#     msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞: ", reply_markup=generate_markup(dates))
#     bot.register_next_step_handler(msg, process_date_choice)
#
#
# def process_date_choice(message):
#     global chosen_date
#     chosen_date = message.text
#     msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞:", reply_markup=generate_markup(times))
#     bot.register_next_step_handler(msg, process_time_choice)
#
#
# def process_time_choice(message):
#     global chosen_time
#     chosen_time = message.text
#     confirmation_message = f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –∫ {chosen_master} for {chosen_service} on {chosen_date} at {chosen_time}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —ç—Ç–æ? (–î–∞/–Ω–µ—Ç)"
#     msg = bot.reply_to(message, confirmation_message)
#     bot.register_next_step_handler(msg, process_confirmation)
#
#
# def process_confirmation(message):
#     if message.text.lower() == '–î–∞'or'–¥–∞':
#         bot.send_message(message.chat.id, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
#
#     else:
#         bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    bot.polling(none_stop=True)