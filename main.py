import datetime

import telebot
from telebot import types
from database_root import *
from settings import START_TEXT, MAIN_MENU_BUTTON_TEXT, MAIN_MENU_SECTION_TEXT

try:
    from config import API_KEY
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.py: {}".format(e))
    exit()

bot = telebot.TeleBot(API_KEY)


def get_place_id_from_url(message):
    message = message.text.split()
    if len(message) > 1:
        return message[1]
    return None


def get_preuser(message):
    return User.get_preuser(message.chat.id)


def get_user(message):
    return User.get_user(message.chat.id)


def check_user(message):
    return User.check_user(message.chat.id)


def check_preuser(message):
    return User.check_preuser(message.chat.id)


def check_prepreuser(message):
    return User.check_prepreuser(message.chat.id)


def check_preuser_name(message):
    return User.get_preuser_name(message.chat.id)


def edit_user(message, name=None, number=None):
    if number is None:
        if name is None:
            User.create_prepreuser(message.chat.id)
        else:
            User.create_preuser(message.chat.id, name=name)
    else:
        User.create_user(message.chat.id, number=number)


@bot.message_handler(commands=['start'])
def start(message):
    if check_user(message):
        if get_place_id_from_url(message) is None:
            main_menu(message)
        else:
            place_id = int(get_place_id_from_url(message))
            start_record(message, place_id)
    elif check_preuser(message):
        handle_message(message)
    else:
        edit_user(message)
        bot.send_message(message.chat.id, f"{START_TEXT} –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if check_preuser(message):
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à –Ω–æ–º–µ—Ä', reply_markup=keyboard)
    elif check_prepreuser(message):
        edit_user(message, name=message.text)
        message.text = ""
        handle_message(message)
    else:
        bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        if check_user(message):
            bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, {get_user(message).name}. ")
        elif check_preuser(message):
            edit_user(message, number=message.contact.phone_number)
            bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                             reply_markup=types.ReplyKeyboardRemove())
            choose_city(message)
            return
        else:
            bot.send_message(message.chat.id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")
        main_menu(message)


def generate_markup(items, cur_row_width=1):
    markup = types.InlineKeyboardMarkup(row_width=cur_row_width)
    for (name, callback_data) in items:
        markup.add(types.InlineKeyboardButton(name, callback_data=callback_data))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data:
        section, *args = call.data.split(".")
        if section == "main_menu":
            main_menu(call.message)
        elif section == "start_record_by_type":
            start_record_by_type(call.message)
        elif section == "start_record_by_type_of_service":
            start_record_by_type_of_service(call.message, args[0])
        elif section == "start_record_by_service":
            start_record_by_service(call.message, args[0])
        elif section == "start_record_by_place_and_service":
            start_record_by_place_and_service(call.message, args[0])
        elif section == "start_record_by_center":
            start_record_by_center(call.message, args[0])
        elif section == "start_record_by_place":
            start_record_by_place(call.message, args[0])
        elif section == "start_record":
            start_record(call.message, args[0])
        elif section == "start_record_by_service_and_place":
            start_record_by_service_and_place(call.message, args[0])
        elif section == "start_record_with_service":
            start_record_with_service(call.message, args[0], args[1])
        elif section == "start_record_by_date":
            start_record_by_date(call.message, args[0], args[1])
        elif section == "start_record_by_time":
            start_record_by_time(call.message, args[0], args[1], args[2])
        elif section == "start_confirm_record":
            start_confirm_record(call.message, args[0], args[1], args[2])
        elif section == "confirm_record":
            confirm_record(call.message, args[0], args[1], args[2])
        elif section == "confirm_record_from_master":
            confirm_record_from_master(call.message, args[0])
        elif section == "cancel_record_from_master":
            cancel_record_from_master(call.message, args[0])
        elif section == "show_records":
            show_records(call.message)
        elif section == "show_record":
            show_record(call.message, args[0])
        elif section == "choose_city":
            if len(args) == 0:
                choose_city(call.message)
            else:
                set_new_city_from_choose_city(call.message, args[0])
        else:
            print(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è '{section}' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {str(args)}")
            i_dont_know_that_command(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)


def main_menu(message):
    markup = generate_markup([(f"üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", f"start_record_by_type"),
                              (f"üìî –ú–æ–∏ –∑–∞–ø–∏—Å–∏", f"show_records"),
                              (f"üèôÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", f"choose_city")])

    bot.send_message(message.chat.id, f"{MAIN_MENU_SECTION_TEXT()}\n\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å, {get_user(message).name}?",
                     reply_markup=markup)


def start_record_by_type(message):
    cur_types = list()
    for cur_type in GET_TYPES():
        cur_types.append((cur_type.name, f"start_record_by_type_of_service.{cur_type.id}"))
    cur_types.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_types)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —É—Å–ª—É–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_by_type_of_service(message, type_id):
    markup = generate_markup([(f"üé´ –ó–∞–ø–∏—Å—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ", f"start_record_by_service.{type_id}"),
                              (f"üè¢ –ó–∞–ø–∏—Å—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–ª–æ–Ω", f"start_record_by_center.{type_id}"),
                              (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —É—Å–ª—É–≥–∏", f"start_record_by_type"),
                              (MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                     reply_markup=markup)


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î —É—Å–ª—É–≥–∏, –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏—Ö –∞–π–¥–∏ –∫ place (—Å–∞–ª–æ–Ω—ã) –∏ records (–∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω—ã) TODO: –¥–æ–±–∞–≤–∏—Ç—å
# TODO: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É—Å–ª—É–≥: –≤—ã–±–æ—Ä —É—Å–ª—É–≥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ, –¥–∞–ª–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ç–µ–π —Å–∞–ª–æ–Ω–æ–≤, –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É
#  –∏ —ç—Ç–∏–º —É—Å–ª—É–≥–∞–º, –¥–∞–ª–µ–µ —Å–∞–ª–æ–Ω—ã (—Ç–æ–∂–µ —Å —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —ç—Ç–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏), –∞ –¥–∞–ª–µ–µ start_record —Å id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞
def start_record_by_service(message, type_id):
    cur_services = list()
    for cur_service in GET_SERVICES_BY_TYPE_AND_CITY(type_id, get_user(message).city):
        cur_services.append((f"{cur_service.name} ({cur_service.get_duration_str()})", f"start_record_by_place_and_service.{cur_service.id}"))
    cur_services.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_services)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_by_place_and_service(message, service_id):
    cur_places = list()
    for cur_place in GET_PLACES_BY_SERVICE_AND_CITY(service_id, get_user(message).city):
        cur_places.append((cur_place.address, f"start_record_with_service.{cur_place.id}.{service_id}"))
    cur_places.append((f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥", f"start_record_by_service.{GET_SERVICE(service_id).type_id}"))
    cur_places.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_places)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É {GET_SERVICE(service_id).name}:",
                     reply_markup=markup)


def start_record_by_center(message, type_id):
    cur_centers = list()
    for cur_center in GET_CENTERS_BY_TYPE_AND_CITY(type_id, get_user(message).city):
        cur_centers.append((cur_center.name, f"start_record_by_place.{cur_center.id}"))
    cur_centers.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_centers)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å —Å–∞–ª–æ–Ω–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_by_place(message, center_id):
    cur_places = list()
    for cur_place in GET_PLACES_BY_CENTER_AND_CITY(center_id, get_user(message).city):
        cur_places.append((cur_place.address, f"start_record.{cur_place.id}"))
    cur_places.append((f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤", f"start_record_by_center.{GET_CENTER(center_id).type_id}"))
    cur_places.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_places)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω —Å–µ—Ç–∏ {GET_CENTER(center_id).name}, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record(message, place_id):
    place = GET_PLACE(place_id)
    markup = generate_markup([(f"üé´ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", f"start_record_by_service_and_place.{place_id}"),
                              (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥ –∏–ª–∏ —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤", f"start_record_by_type_of_service.{place.center.type_id}"),
                              (MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–∏—Å—å –≤ '{place.center.name}' –ø–æ –∞–¥—Ä–µ—Å—É: {place.address}",
                     reply_markup=markup)


def start_record_by_service_and_place(message, place_id):
    cur_services = list()
    for cur_service in GET_SERVICES_BY_PLACE(place_id):
        cur_services.append((f"{cur_service.name} ({cur_service.get_duration_str()})", f"start_record_with_service.{place_id}.{cur_service.id}"))
    cur_services.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_services)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_with_service(message, place_id, service_id):
    place = GET_PLACE(place_id)
    service = GET_SERVICE(service_id)
    markup = generate_markup([(f"üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏", f"start_record_by_date.{place_id}.{service_id}"),
                              (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥ –∏–ª–∏ —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤", f"start_record_by_type_of_service.{place.center.type_id}"),
                              (MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É '{service.name}' "
                                      f"–≤ '{place.center.name}' –ø–æ –∞–¥—Ä–µ—Å—É: {place.address}",
                     reply_markup=markup)


# TODO: –¥–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ datetime, –∑–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç—Å—ã–ª–∫—É —Å–∞–ª–æ–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
def start_record_by_date(message, place_id, service_id):
    cur_days = list()
    for cur_day_button, cur_day_tag in GET_SERVICE_PLACE(place_id, service_id).get_next_days():
        cur_days.append((cur_day_button, f"start_record_by_time.{place_id}.{service_id}.{cur_day_tag}"))
    cur_days.append(
        (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥ –∏–ª–∏ —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤", f"start_record_by_type_of_service.{GET_SERVICE(service_id).type_id}"))
    cur_days.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_days)

    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_record_by_time(message, place_id, service_id, date):
    cur_date = datetime.strptime(date, "%d/%m/%Y")
    cur_times = list()
    for cur_time_button, cur_time_tag in GET_SERVICE_PLACE(place_id, service_id).get_next_times(cur_date):
        cur_times.append((cur_time_button, f"start_confirm_record.{place_id}.{service_id}.{cur_time_tag}"))
    cur_times.append(
        (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", f"start_record_by_date.{place_id}.{service_id}"))
    cur_times.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_times)

    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def start_confirm_record(message, place_id, service_id, date_and_time):
    cur_date_and_time = datetime.strptime(date_and_time, "%d/%m/%Y/%H/%M")
    cur_times = [
        (f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", f"confirm_record.{place_id}.{service_id}.{date_and_time}"),
        (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", f"start_record_by_time.{place_id}.{service_id}.{cur_date_and_time.strftime('%d/%m/%Y')}"),
        (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", f"start_record_by_date.{place_id}.{service_id}"),
        (MAIN_MENU_BUTTON_TEXT, "main_menu")
    ]
    markup = generate_markup(cur_times)

    service = GET_SERVICE(service_id)
    place = GET_PLACE(place_id)
    cur_end_date_and_time = cur_date_and_time + timedelta(minutes=service.duration)
    bot.send_message(message.chat.id,
                     f"–°–µ–π—á–∞—Å –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ {cur_date_and_time.strftime('%d.%m.%Y')} "
                     f"—Å {cur_date_and_time.strftime('%H:%M')} –¥–æ {cur_end_date_and_time.strftime('%H:%M')} "
                     f"–Ω–∞ —É—Å–ª—É–≥—É '{service.name}' "
                     f"–≤ '{place.center.name}' "
                     f"–ø–æ –∞–¥—Ä–µ—Å—É: {place.address}",
                     reply_markup=markup)


def confirm_record(message, place_id, service_id, date_and_time):
    cur_date_and_time = datetime.strptime(date_and_time, "%d/%m/%Y/%H/%M")

    cur_record_id = ADD_RECORD(get_user(message).id, place_id, service_id, _start_date=cur_date_and_time)
    send_record_to_master(cur_record_id)

    show_record(message, cur_record_id)


def show_records(message):
    cur_records = list()
    cur_records_str = list()
    for i, cur_record in enumerate(sorted(get_user(message).get_records(), key=lambda x: x.start_date)):
        cur_records_str.append(cur_record.get_text_for_str(i))
        cur_records.append((cur_record.get_text_for_button(i), f"show_record.{cur_record.id}"))
    cur_records.append((MAIN_MENU_BUTTON_TEXT, "main_menu"))
    markup = generate_markup(cur_records)

    cur_records_str = '\n\n'.join(cur_records_str)
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n"
                                      f"{cur_records_str}\n\n"
                                      f"‚ùì (–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)\n"
                                      f"‚ö™Ô∏è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)\n"
                                      f"üü¢ (–¥–æ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞)\n"
                                      f"üî¥ (–¥–æ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫)\n\n"
                                      f"–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å",
                     reply_markup=markup)


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏,
#  –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ (–∑–∞ —Å—É—Ç–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–¥–µ—Ç)
def show_record(message, record_id):
    record = GET_RECORD(record_id)

    if record is None:
        markup = generate_markup([(f"üìî –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏", f"show_records"),
                                  (MAIN_MENU_BUTTON_TEXT, "main_menu")])

        bot.send_message(message.chat.id, f"–°–∞–ª–æ–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ",
                         reply_markup=markup)
        return

    if record.get_remaining_time() > timedelta():
        markup = generate_markup([(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", f"show_record.{record_id}"),
                                  (f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π", f"show_records"),
                                  (MAIN_MENU_BUTTON_TEXT, "main_menu")])

        if record.active:
            is_active = "—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∞–ª–æ–Ω–æ–º"
        else:
            is_active = "–µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∞–ª–æ–Ω–æ–º"
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å {is_active}:\n\n"
                                          f"–°–∞–ª–æ–Ω: {record.service.name}\n"
                                          f"–ê–¥—Ä–µ—Å: {record.place.address}\n"
                                          f"–ù–∞—á–∞–ª–æ: {record.start_date.strftime('%d.%m.%Y %H:%M')}\n"
                                          f"–ö–æ–Ω–µ—Ü: {record.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                                          f"–î–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å {record.get_text_of_remaining_time()}",
                         reply_markup=markup)
    else:
        markup = generate_markup([(f"üìî –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏", f"show_records"),
                                  (MAIN_MENU_BUTTON_TEXT, "main_menu")])

        bot.send_message(message.chat.id, f"–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ",
                         reply_markup=markup)


def send_record_to_master(record_id, first=True):
    record = GET_RECORD(record_id)

    if record.active:
        is_active = "—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∞–ª–æ–Ω–æ–º"
        markup = generate_markup([(f"üìî –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω", f"show_master_records"),
                                  (MAIN_MENU_BUTTON_TEXT, "main_menu")])
    else:
        is_active = "–µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∞–ª–æ–Ω–æ–º"
        markup = generate_markup([(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", f"confirm_record_from_master.{record_id}"),
                                  (f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", f"cancel_record_from_master.{record_id}"),
                                  (f"üìî –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω", f"show_master_records"),
                                  (MAIN_MENU_BUTTON_TEXT, "main_menu")])
    if first:
        start_text = "–ö –≤–∞–º –∑–∞–ø–∏—Å–∞–ª–∏—Å—å"
    else:
        start_text = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏"
    bot.send_message(record.place.owner_id, f"{start_text}\n\n"
                                      f"–ó–∞–ø–∏—Å—å {is_active}\n"
                                      f"–ö–ª–∏–µ–Ω—Ç: {record.user.name} (–Ω–æ–º–µ—Ä: {record.user.number})\n"
                                      f"–°–∞–ª–æ–Ω: {record.service.name}\n"
                                      f"–ê–¥—Ä–µ—Å: {record.place.address}\n"
                                      f"–ù–∞—á–∞–ª–æ: {record.start_date.strftime('%d.%m.%Y %H:%M')}\n"
                                      f"–ö–æ–Ω–µ—Ü: {record.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                                      f"–î–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å {record.get_text_of_remaining_time()}",
                     reply_markup=markup)


def confirm_record_from_master(message, record_id):
    ACTIVATE_RECORD(record_id)
    main_menu(message)


def cancel_record_from_master(message, record_id):
    DELETE_RECORD(record_id)
    main_menu(message)


def choose_city(message):
    cities = list()
    for city in GET_CITIES():
        cities.append((city.name, f"choose_city.{city.id}"))
    markup = generate_markup(cities)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                     reply_markup=markup)


def set_new_city_from_choose_city(message, city_id):
    if GET_USER(message.chat.id).city:
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {GET_CITY_OBJECT(city_id).name}")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, {GET_USER(message.chat.id).name}! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {GET_CITY_OBJECT(city_id).name}")
    SET_USER_CITY(message.chat.id, city_id)
    main_menu(message)


def i_dont_know_that_command(message):
    markup = generate_markup([(MAIN_MENU_BUTTON_TEXT, "main_menu")])

    bot.send_message(message.chat.id, f"–ü–æ–∫–∞ —á—Ç–æ —è —Ç–∞–∫–æ–≥–æ –Ω–µ —É–º–µ—é. –ü—Ä–æ—Å—Ç–∏, {get_user(message).name}, —è –≥–ª—É–ø—ã–π üòû",
                     reply_markup=markup)


if __name__ == "__main__":
    bot.polling(none_stop=True)